stages:
- build_base
- build
- test
- release
- prepare-post-release
- post-release

.docker: &docker
  image: docker:19.03-git
  services:
    - docker:19.03-dind
  variables:
    DOCKER_DRIVER: overlay2

.build: &build
  <<: *docker
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  after_script:
    - docker push "$BUILD_IMAGE_NAME"

# Test stage
shell check:
  image: koalaman/shellcheck-alpine:stable
  stage: test
  before_script:
    - shellcheck --version
  script:
    - shellcheck aws/src/bin/*

.test-command: &test-command
  stage: test
  image: $BUILD_IMAGE_NAME

# Release stage
.release-tag: &release-tag
  <<: *docker
  stage: release
  script:
    - 'echo ${CI_JOB_TOKEN} | docker login --password-stdin -u $CI_REGISTRY_USER $CI_REGISTRY'
    - echo "Using tag $CI_COMMIT_TAG for image"
    - docker pull "$BUILD_IMAGE_NAME"
    - docker tag "$BUILD_IMAGE_NAME" "$IMAGE_NAME_FOR_REGISTRY:latest"
    - docker tag "$BUILD_IMAGE_NAME" "$IMAGE_NAME_FOR_REGISTRY:$CI_COMMIT_TAG"
    - docker push "$IMAGE_NAME_FOR_REGISTRY:latest"
    - docker push "$IMAGE_NAME_FOR_REGISTRY:$CI_COMMIT_TAG"
  only:
    - tags

prepare release notes:
  <<: *docker
  stage: prepare-post-release
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "$CI_REGISTRY_IMAGE"
    - docker pull "$CI_REGISTRY_IMAGE":latest
    - digest=$(docker inspect --format='{{index .RepoDigests 0}}' "$CI_REGISTRY_IMAGE":latest)
    - |
      cat >release-description.txt <<EOL
      Pull the new image using \`latest\` tag:
      \`\`\`bash
      docker pull ${CI_REGISTRY_IMAGE}:latest
      \`\`\`
      or by using its digest for this release:
      \`\`\`bash
      docker pull ${digest}
      \`\`\`
      What's new:
      - \<insert new feature description here>
      - ...
      EOL
  artifacts:
    paths:
      - release-description.txt

create release notes:
  stage: post-release
  image: registry.gitlab.com/gitlab-org/release-cli
  needs:
    - job: prepare release notes
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "running release from $CI_COMMIT_TAG"
    - export RELEASE_DESCRIPTION=$(cat release-description.txt)
    - echo "$RELEASE_DESCRIPTION"
    - >
      release-cli create --name "Release $CI_COMMIT_TAG" --description "$RELEASE_DESCRIPTION"
      --tag-name $CI_COMMIT_TAG --ref $CI_COMMIT_TAG

include:
  - local: /ci/aws-base.gitlab-ci.yml
  - local: /ci/aws-ecs.gitlab-ci.yml
  - local: /ci/aws-ec2.gitlab-ci.yml
  - local: /ci/aws-cloudformation.gitlab-ci.yml
